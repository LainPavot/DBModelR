% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/meta_classes.R
\docType{class}
\name{MetaModel-class}
\alias{MetaModel-class}
\alias{MetaModel}
\title{MetaModel}
\description{
This class defines a super class for every model used by the ORM.
The prefered method to create a model is to use the ORM's
method \code{ModelBuilder}, like this:

Person <- ORM$ModelBuilder(
"Person",
name=CharacterField(),
nickname=CharacterField(nullable=TRUE),
adress=ForeignKeyField(Adress, type=MANY_TO_MANY, nullable=TRUE)
)

You can also inheritate from this class for more flexible behaviours
and advenced uses. RefClass is the prefered class style for models.

If you decide to implement models yourself, please, remember
the first parameter of models must be the ORM itself, and the second
parameters must be a TableMeta object, containing at least the table
name and the fields corresponding the in-base.

The code from the previous section is more or less equivalant to:

Person <- (function(orm) {
meta <- TableMeta(
table_name=TableName("Person"),
name=CharacterField(),
nickname=CharacterField(nullable=TRUE),
adress=ForeignKeyField(Adress, type=MANY_TO_MANY, nullable=TRUE)
)
model <- setRefClass(
"Person",
contains=c("MetaModel")
)
return (function(...) {
model(orm__=orm, meta__=meta, ...)
})
})(orm)
}

